generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model flock {
  id                Int             @id @default(autoincrement())
  created           DateTime        @default(now())
  name              String
  updated           DateTime        @default(now())
  salt              String
  usersinflocks     usersinflocks[]
}

model user {
  id                  Int       @id @default(autoincrement())
  
  name                String
  email               String    @unique(map: "User_email_key")
  password            String
  salt                String
    
  created             DateTime  @default(now())
  updated             DateTime  @default(now())

  usersinflocks       usersinflocks[]
  foodsessionentry    foodsessionentry[]
  userpollvoting      userpollvoting[]

  friendsRelation     user[]    @relation("friends")
  friends             user[]    @relation("friends")

  @@map("users")
}

model foodsession {
  id                            Int       @id @default(autoincrement())
  
  name                          String
  foodsessionAppointmentType    String    @default("unset")
  foodTime                      DateTime  @default(now())
  isIndividualTimeSwitchChecked Boolean   @default(false)

  rouletteRadius                Float     @default(1)
  swypeRadius                   Float     @default(1)
  
  fkFlockId                     Int       
  fkFoodsessionDecisionType     Int       @default(1)

  foodsessionntry               foodsessionentry[]
  locationinfoodsession         locationsinfoodsessionentrys[]
  foodtime                      foodtime[]
  foodsessiondecisiontype       foodsessiondecisiontype @relation(fields: [fkFoodsessionDecisionType], references: [id])
  foodsessionpoll               foodsessionpoll[]
}

model foodsessiondecisiontype {
  id          Int @id @default(autoincrement())
  name        String @default("unset")
  foodsession foodsession[]
}

model foodsessionpoll {
  id            Int @id @default(autoincrement())

  isPollAnswersAnonymousChecked Boolean
  isPollMultipleAnswersChecked   Boolean

  fkFoodSession Int

  foodsessionpollanswer foodsessionpollanswer[]
  foodsession           foodsession @relation(fields: [fkFoodSession], references: [id])
}

model foodsessionpollanswer  {
  id Int @id @default(autoincrement())
  fkFoodsessionPoll Int
  name String
  count Int

  userpollvoting                userpollvoting[]
  foodsessionpoll foodsessionpoll @relation(fields: [fkFoodsessionPoll], references: [id])
}

model userpollvoting {
  fkUser Int
  fkFoodsessionPollAnwer Int

  user                  user                  @relation(fields: [fkUser],                 references: [id], map: "userPollVoting_userid_fkey")
  foodsessionpollanwer  foodsessionpollanswer @relation(fields: [fkFoodsessionPollAnwer], references: [id], map: "userPollVoting_foodsessionpollanwerId_fkey")

  @@id([fkUser, fkFoodsessionPollAnwer])
  @@index([fkUser], map: "locationInFoodsessions_fkLocationId_fkey")
}

model foodtime {
  id              Int         @id @default(autoincrement())
  fkFoodsessionId Int
  weekday         Int         @default(0)
  foodtime        DateTime    @default(now())
  isChecked       Boolean     @default(false)

  foodsession     foodsession @relation(fields: [fkFoodsessionId], references: [id])
}

model location {
  id                Int       @id @default(autoincrement())
  name              String
  description       String
  isPlaceToEat      String
  isPlaceToGetFood  String

  locationinfoodsession locationsinfoodsessionentrys[]
}

model usersinflocks {
  fkUserId            Int
  fkFlockId           Int
  assignedAt          DateTime  @default(now())
  isFlockLeader       Boolean   @default(false)

  flock               flock     @relation(fields: [fkFlockId], references: [id], map: "UsersInFlocks_flockId_fkey")
  user                user      @relation(fields: [fkUserId], references: [id], map: "UsersInFlocks_userId_fkey")

  @@id([fkUserId, fkFlockId])
  @@index([fkFlockId], map: "UsersInFlocks_flockId_fkey")
}

model foodsessionentry {
  id                Int @id @default(autoincrement())
  fkUserId          Int
  fkFoodSessionId   Int 
  assignedAt        DateTime        @default(now())

  user              user            @relation(fields: [fkUserId], references: [id], map: "foodsessionentrys_userId_fkey")
  foodsession       foodsession     @relation(fields: [fkFoodSessionId], references: [id], map: "foodsessionentry_foodsessionId_fkey")

  @@index([fkFoodSessionId], map: "foodsessionentry_fkFoodSessionIdId_fkey")
}

model locationsinfoodsessionentrys {
  fkFoodSessionId   Int
  fkLocationId      Int

  location          location        @relation(fields: [fkLocationId], references: [id], map: "locationInFoodSessions_locationId_fkey")
  foodsession       foodsession      @relation(fields: [fkFoodSessionId], references: [id], map: "locationInFoodSessions_foodsessionId_fkey")

  @@id([fkLocationId, fkFoodSessionId])
  @@index([fkLocationId], map: "locationInFoodsessions_fkLocationId_fkey")
}

// model restaurant {
//   id              Int      @id @default(autoincrement())
//   name            String?
//   node            Int      @unique(map: "Restaurant_node_key")
//   lat             Float?
//   long            Float?
//   city            String?
//   housenumber     Int?
//   postcode        Int?
//   street          String?
//   cuisine         String?
//   takeaway        String?
//   operator        String?
//   website         String?
//   phone           String?
//   openingHours    String?
//   brand           String?
//   dietKosher      Boolean? @default(false)
//   dietHalal       Boolean? @default(false)
//   dietDiabetes    Boolean? @default(false)
//   dietVegan       Boolean? @default(false)
//   dietVegetarian  Boolean? @default(false)
// }
